import { describe, it, expect } from "vitest"
import { DocumentationGenerator } from "../DocumentationGenerator"
import { ProjectInfo } from "../ProjectScanner"

describe("DocumentationGenerator", () => {
	const mockProjectInfo: ProjectInfo = {
		name: "test-project",
		description: "A test project for unit testing",
		rootPath: "/test/project",
		structure: {
			directories: [
				{
					name: "src",
					path: "src",
					fileCount: 5,
					subdirectories: ["components", "utils"],
				},
				{
					name: "tests",
					path: "tests",
					fileCount: 3,
					subdirectories: [],
				},
			],
			fileCount: 15,
			totalSize: 0,
			fileTypes: {
				".ts": 8,
				".tsx": 4,
				".json": 2,
				".md": 1,
			},
		},
		technologies: [
			{ name: "Node.js", type: "language", configFile: "package.json" },
			{ name: "TypeScript", type: "language", version: "^5.0.0" },
			{ name: "React", type: "framework", version: "^18.0.0" },
			{ name: "Jest", type: "tool" },
		],
		configFiles: [
			{ name: "package.json", path: "package.json", type: "npm" },
			{ name: "tsconfig.json", path: "tsconfig.json", type: "typescript" },
			{ name: ".gitignore", path: ".gitignore", type: "git" },
		],
		dependencies: {
			production: {
				react: "^18.0.0",
				"react-dom": "^18.0.0",
			},
			development: {
				typescript: "^5.0.0",
				jest: "^29.0.0",
			},
		},
		scripts: {
			start: "react-scripts start",
			build: "react-scripts build",
			test: "jest",
		},
		gitInfo: {
			hasGit: true,
			branch: "main",
			remote: "https://github.com/user/test-project.git",
		},
		patterns: {
			architecture: "Component-based",
			testingFramework: "Jest",
			buildTool: "Webpack",
			packageManager: "npm",
			cicd: ["GitHub Actions"],
		},
	}

	it("should generate documentation with all sections", async () => {
		const generator = new DocumentationGenerator()
		const documentation = await generator.generateDocumentation(mockProjectInfo)

		// Check that the documentation contains expected sections
		expect(documentation).toContain("# test-project")
		expect(documentation).toContain("A test project for unit testing")
		expect(documentation).toContain("## Technologies")
		expect(documentation).toContain("## Project Structure")
		expect(documentation).toContain("## Configuration Files")
		expect(documentation).toContain("## Dependencies")
		expect(documentation).toContain("## Available Scripts")
		expect(documentation).toContain("## Development Setup")
		expect(documentation).toContain("## Architecture Patterns")
		expect(documentation).toContain("## Git Information")
	})

	it("should include technology details", async () => {
		const generator = new DocumentationGenerator()
		const documentation = await generator.generateDocumentation(mockProjectInfo)

		expect(documentation).toContain("**Node.js**")
		expect(documentation).toContain("**TypeScript** (^5.0.0)")
		expect(documentation).toContain("**React** (^18.0.0)")
		expect(documentation).toContain("**Jest**")
	})

	it("should include file statistics", async () => {
		const generator = new DocumentationGenerator()
		const documentation = await generator.generateDocumentation(mockProjectInfo)

		expect(documentation).toContain("Total files: 15")
		expect(documentation).toContain(".ts: 8 files")
		expect(documentation).toContain(".tsx: 4 files")
	})

	it("should include setup instructions", async () => {
		const generator = new DocumentationGenerator()
		const documentation = await generator.generateDocumentation(mockProjectInfo)

		expect(documentation).toContain("Clone the repository: `git clone https://github.com/user/test-project.git`")
		expect(documentation).toContain("Install dependencies: `npm install`")
		expect(documentation).toContain("Start the development server: `npm run start`")
		expect(documentation).toContain("Run tests: `npm run test`")
	})

	it("should include timestamp", async () => {
		const generator = new DocumentationGenerator()
		const documentation = await generator.generateDocumentation(mockProjectInfo)

		expect(documentation).toContain("This documentation was automatically generated by Roo Code on")
	})
})
